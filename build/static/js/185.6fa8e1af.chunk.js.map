{"version":3,"file":"static/js/185.6fa8e1af.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","pages/sample/House/HousePostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useMemo, useState} from 'react';\nimport {Button, Col, Form, message, Row, Select, Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport ImgCrop from \"antd-img-crop\";\n\n\nconst initialValueForm = {\n    name: \"\",\n    slotId: null,\n    imageId:[]\n};\n\n\nconst HousePostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n    const [editImageId, setEditImageId] = useState(null)\n\n\n\n\n    // query-slot-get\n    const {data: slotData, refetch: slotFetch} = useQuery(\n        'get-slot',\n        () => apiService.getData('/Slot'),\n        {\n            enabled: false,\n        },\n    );\n\n\n    // query-image\n    const {\n        mutate: imagesUploadMutate,\n        data: imagesUpload,\n        isLoading: imagesUploadLoading,\n        isSuccess: imagesUploadSuccess,\n    } = useMutation(({url, formData}) => apiService.postData(url, formData), {\n\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response?.data?.errors) {\n                message.error(`${obj}: ${error.response?.data?.errors[obj]}`)\n            }\n        }\n    });\n\n    // query-house\n    const {\n        mutate: postHouseMutate,\n        data: postHouse,\n        isLoading: postHouseLoading,\n        isSuccess: postHouseSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editHouseLoading,\n        data: editHouseData,\n        refetch: editHouseRefetch,\n        isSuccess: editHouseSuccess,\n\n    } = useQuery([\"edit-house\", editId], () => apiService.getDataByID(\"/House\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putHouse,\n        isLoading: putHouseLoading,\n        data: putData,\n        isSuccess: putHouseSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n    const {\n        mutate: putImage,\n        isLoading: putImageLoading,\n        data: putImageData,\n        isSuccess: putImageSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n\n    //                                              =====useEffect====\n\n    // house success\n    useEffect(() => {\n        if (putHouseSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postHouseSuccess || putHouseSuccess) {\n            navigate('/house')\n        }\n    }, [postHouse, putData])\n\n    // if edit house\n    useEffect(() => {\n        if (editId !== \"\") {\n            editHouseRefetch();\n        }\n    }, [editId]);\n\n    // if no edit house\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n        slotFetch()\n    }, []);\n\n\n    //edit house\n    useEffect(() => {\n\n        let imageId = null;\n        if (editHouseData !== undefined) {\n                 imageId = [{\n                    uid: editHouseData?.image?.id,\n                    name: editHouseData?.image?.id,\n                    status: \"done\",\n                    url: `${process.env.REACT_APP_IMAGE_URL}/${editHouseData?.image.path}`\n                }]\n\n        }\n\n\n        if (editHouseSuccess) {\n\n            const edit = {\n                name: editHouseData?.name,\n                slotId: editHouseData?.slot?.id,\n                imageId\n            }\n\n            setFileListProps(imageId)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editHouseData])\n    const onFinish = (values) => {\n\n\n\n        const data = {\n            name: values.name,\n            slotId: values.slotId,\n            imageId:fileListProps[0]?.uid\n        };\n        if (editHouseSuccess) {\n            putHouse({url: `/House`, data,id:editId});\n        } else {\n            postHouseMutate({url: \"/House/\", data});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n    // image\n    useEffect(() => {\n        let imageData=putImageSuccess? putImageData:imagesUpload\n        if (imagesUploadSuccess||putImageSuccess) {\n            const uploadImg = [{\n                uid: imageData?.id,\n                name: imageData?.id,\n                status: \"done\",\n                url: `${process.env.REACT_APP_IMAGE_URL}/${imageData?.path}`\n            }]\n            form.setFieldsValue({imageId: uploadImg});\n            setFileListProps(uploadImg);\n        }\n    }, [imagesUpload,putImageData]);\n\n    const onChangeImage = ({fileList: newFileList}) => {\n\n        const formData = new FormData();\n        if (newFileList.length !== 0) {\n            formData.append(\"fromFile\", newFileList[0].originFileObj);\n            if (editHouseSuccess && editImageId) {\n                putImage({url: `/Image`, data: formData,id:editImageId})\n            } else {\n                imagesUploadMutate({url: \"/Image/\", formData});\n            }\n        }\n\n    };\n\n    const handleRemoveImage = (file) => {\n        const ids = file?.uid\n        setEditImageId(ids)\n        form.setFieldsValue({imageId: []});\n        setFileListProps([])\n\n    }\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n    // option slot\n    const optionsSlot = useMemo(() => {\n        return slotData?.result?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.name,\n            };\n        });\n    }, [slotData]);\n\n\n    return (<div>\n        {(postHouseLoading || editHouseLoading || putHouseLoading || imagesUploadLoading || putImageLoading) ?\n            <AppLoader/> :\n            <Form\n                form={form}\n                name=\"basic\"\n                labelCol={{\n                    span: 24\n                }}\n                wrapperCol={{\n                    span: 24\n                }}\n                style={{\n                    maxWidth: \"100%\"\n                }}\n                initialValues={initialValueForm}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n\n\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется название дом'}\n                            label={'Название дом'}\n                            name={'name'}\n                        />\n\n\n                    </Col>\n                    <Col span={12}>\n                        <Form.Item\n                            label={'Выберите слот'}\n                            name={'slotId'}\n                            rules={[{\n                                required: true, message: 'Вы должны выбрать слот'\n                            }]}\n                            wrapperCol={{\n                                span: 24,\n                            }}\n                        >\n                            <Select\n                                style={{\n                                    width: '100%',\n                                }}\n                                placeholder='Выберите одну слот'\n                                optionLabelProp='label'\n                                options={optionsSlot}\n                            />\n                        </Form.Item>\n                    </Col>\n                </Row>\n\n                <Row gutter={20}>\n                    <Col span={12}>\n                        <Form.Item\n                            label='Изображение дома'\n                            name={'imageId'}\n                            rules={[{required: true, message: 'Требуется изображение'}]}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={1}\n                                    fileList={fileListProps}\n                                    listType='picture-card'\n                                    onChange={onChangeImage}\n                                    onPreview={onPreview}\n                                    onRemove={handleRemoveImage}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n                </Row>\n\n\n                <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                    {editHouseSuccess ? 'Изменить' : 'Создать'}\n                </Button>\n            </Form>}\n    </div>);\n};\n\nexport default HousePostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","initialValueForm","slotId","imageId","HousePostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","editImageId","setEditImageId","data","slotData","refetch","slotFetch","useQuery","apiService","getData","enabled","mutate","imagesUploadMutate","imagesUpload","isLoading","imagesUploadLoading","isSuccess","imagesUploadSuccess","useMutation","url","formData","postData","onSuccess","success","onError","error","obj","_error$response","response","_error$response$data","errors","_error$response2","_error$response2$data","concat","postHouseMutate","postHouse","postHouseLoading","postHouseSuccess","_ref2","editHouseLoading","editHouseData","editHouseRefetch","editHouseSuccess","getDataByID","putHouse","putHouseLoading","putData","putHouseSuccess","_ref3","id","putImage","putImageLoading","putImageData","putImageSuccess","_ref4","useEffect","type","EDIT_DATA","payload","setFieldsValue","_editHouseData$image","_editHouseData$image2","undefined","uid","image","status","process","path","_editHouseData$slot","edit","slot","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","imageData","uploadImg","optionsSlot","useMemo","_slotData$result","result","map","option","value","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListProps$","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","Select","width","placeholder","optionLabelProp","options","ImgCrop","Upload","maxCount","fileList","listType","onChange","_ref5","newFileList","FormData","length","append","originFileObj","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","Image","imgWindow","open","document","write","outerHTML","onRemove","ids","beforeUpload","Button","htmlType","marginTop"],"sourceRoot":""}
{"version":3,"file":"static/js/944.c3ffea37.chunk.js","mappings":"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","sources":["pages/sample/Selling/SellingTable.jsx","pages/sample/Selling/index.jsx"],"sourcesContent":["import {Button, Image, Space, Table, Tag} from \"antd\";\nimport PropTypes from \"prop-types\";\nimport {FaFilePdf} from \"react-icons/fa\";\n\nconst SellingTable = ({data}) => {\n\n\n    const CreatePDF = (id) => {\n        console.log(id)\n    };\n\n\n\n\n\n\n\n\n\n    const columns = [\n        {\n            title: 'Имя',\n            dataIndex: 'name',\n            id: 'name',\n            render: (text) => <p>{text}</p>,\n        },\n        {\n            title: 'Площадь',\n            dataIndex: 'size',\n            id: 'size',\n            render: (text) => <p>{text}м²</p>,\n        },\n        {\n            title: 'Количество номеров',\n            dataIndex: 'roomCount',\n            id: 'roomCount',\n            render: (text) => <p>{text}</p>,\n        },\n        {\n            title: 'Стоимость номера',\n            dataIndex: 'price',\n            id: 'price',\n            render: (text) => <p>{text}$</p>,\n        },\n        {\n            title: 'Состояние номера',\n            dataIndex: 'status',\n            id: 'status',\n            render: (text) => <Tag color={text===0?\"#0232f6\":text===1 ?\"#f5c306\" :\"#ff0000\"}>{text===0?\"Empty\":text===1 ?\"Busied\" :\"Bought\"}</Tag>,\n        },\n        {\n            title: 'Изображение комнаты',\n            dataIndex: 'homeImage',\n            id: 'homeImage',\n            render: (image) => {\n                return (\n                    <Image\n                        width={50}\n\n                        src={`${process.env.REACT_APP_IMAGE_URL}/${image?.path}`}\n                    />\n                )},\n        },\n        {\n            title: 'Action',\n            id: 'action',\n            render: (_, record) => (\n                <Space size={20}>\n                    <Button\n                        onClick={() => CreatePDF(record.id)}\n                        type='outline'\n                        icon={<FaFilePdf />}>\n\n                    </Button>\n\n                </Space>\n            ),\n        },\n    ];\n\n    return (\n        <div>\n\n            <Table\n                columns={columns}\n\n                dataSource={data}\n                rowKey={(record) => record.id}\n            />\n        </div>\n    );\n};\n\nSellingTable.propTypes = {\n    data: PropTypes.array,\n}\n\nexport default SellingTable;","import React, {useEffect, useMemo, useState} from 'react';\nimport {Col, Form, message, Row, Select, Space, Spin} from 'antd';\nimport apiService from '../../../@crema/services/apis/api';\nimport {useQuery} from 'react-query';\nimport SellingTable from \"./SellingTable\";\n\nconst Index = () => {\n    const [form] = Form.useForm();\n    const [filterStatus, setFilterStatus] = useState(\"\")\n    const [filterId, setFilterId] = useState({\n        slotId:null,\n        houseId:null,\n        floorId:null\n    })\n\n\n\n\n    // query-slot-get\n    const {data: slotData, refetch: slotFetch} = useQuery(\n        'get-slot',\n        () => apiService.getData('/Slot'),\n        {\n            enabled: false,\n        },\n    );\n    // query-house-get\n    const {data: houseData, refetch: houseFetch} = useQuery(\n        'get-house',\n        () => apiService.getData(`/House?slotId=${filterId?.slotId}`),\n        {\n            enabled: false,\n        },\n    );\n\n    // query-floor-get\n    const {data: floorData, refetch: floorFetch} = useQuery(\n        'get-floor',\n        () => apiService.getData(`/Floor?housId=${filterId?.houseId}`),\n        {\n            enabled: false,\n        },\n    );\n\n    // get apartment\n    const {\n        data:apartmentData,\n        isLoading: getLoading,\n        refetch\n    } = useQuery('selling-apartment-get', () => apiService.getData(`/Apartment/?${filterStatus ? `status=${filterStatus}` : \"\"}${filterId?.slotId ?`&SlotId=${filterId?.slotId}`:\"\"}${filterId?.houseId ?`&HouseId=${filterId?.houseId}`:\"\"}${filterId?.floorId ?`&FlorId=${filterId?.floorId}`:\"\"}`), {\n        // enabled:false,\n        onError: (error) => {\n\n            message.error(error);\n            // Handle the error\n        },\n    });\n\n\n    useEffect(() => {\n        slotFetch()\n    }, []);\n    // refetch house\n    useEffect(() => {\n        if (filterId?.slotId){\n        houseFetch()\n\n        }\n    }, [filterId?.slotId]);\n\n    // refetch house\n    useEffect(() => {\n        if (filterId?.houseId){\n            floorFetch()\n\n        }\n    }, [filterId?.houseId]);\n\n    useEffect(() => {\n        refetch()\n    }, [filterStatus,filterId]);\n\n    const onChangeFilterStatus = (data) => {\n        setFilterStatus(data)\n    }\n\n    // option status\n    const optionsStatusFilter = useMemo(() => {\n\n        return [\n            {\n                value: '',\n                label: 'All',\n            },\n            {\n                value: 0,\n                label: 'Empty',\n            },\n            {\n                value: 1,\n                label: 'Busied',\n            },\n            {\n                value: 2,\n                label: 'Buyed',\n            },\n        ]\n    }, []);\n\n\n    // option slot\n    const optionsSlot = useMemo(() => {\n        return slotData?.result?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.name,\n            };\n        });\n    }, [slotData]);\n\n\n    const onChangeSlot=(id)=>{\n        form.setFieldsValue({houseId:null,floorId:null})\n        setFilterId({\n            slotId: id,\n            houseId: null,\n            floorId: null\n        })\n    }\n\n\n    // option house\n    const optionsHouse = useMemo(() => {\n\n        return houseData?.result?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.name,\n            };\n        });\n    }, [houseData]);\n    const onChangeHouse=(id)=>{\n        form.setFieldsValue({floorId:null})\n        setFilterId(prevState => ({...prevState,houseId:id,floorId: null}))\n    }\n\n    //option floor\n    const optionsFloor = useMemo(() => {\n        return floorData?.result?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.name,\n            };\n        });\n    }, [floorData]);\n    const onChangeFloor=(id)=>{\n        setFilterId(prevState => ({...prevState,floorId:id}))\n    }\n\n    return (\n        <div className={'site-space-compact-wrapper'}>\n            <Space direction={'vertical'} style={{width: '100%'}}>\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    autoComplete=\"off\"\n                >\n                <Row gutter={20}>\n                    <Col span={6}>\n                        <Form.Item\n                            label={'Выберите слот'}\n                            name={'slotId'}\n\n                            wrapperCol={{\n                                span: 24,\n                            }}\n                        >\n                            <Select\n                                style={{\n                                    width: '100%',\n                                }}\n                                optionLabelProp='label'\n                                onChange={onChangeSlot}\n                                options={optionsSlot}\n                            />\n                        </Form.Item>\n                    </Col>\n                    <Col span={6}>\n                        <Form.Item\n                            label={'Выберите дом'}\n                            name={'houseId'}\n                            wrapperCol={{\n                                span: 24,\n                            }}\n                        >\n                            <Select\n                                style={{\n                                    width: '100%',\n                                }}\n                                optionLabelProp='label'\n                                onChange={onChangeHouse}\n                                options={optionsHouse}\n                            />\n                        </Form.Item>\n                    </Col>\n                    <Col span={6}>\n                        <Form.Item\n                            label={'Выберите пол'}\n                            name={'floorId'}\n\n                            wrapperCol={{\n                                span: 24,\n                            }}\n                        >\n                            <Select\n                                style={{\n                                    width: '100%',\n                                }}\n                                optionLabelProp='label'\n                                options={optionsFloor}\n                                onChange={onChangeFloor}\n                            />\n                        </Form.Item>\n                    </Col>\n                    <Col  span={6}>\n                        <Form.Item\n                            label={'Фильтровать по статусу'}\n                            name={'status'}\n\n                            wrapperCol={{\n                                span: 24,\n                            }}\n                        >\n                        <Select\n                            style={{\n                                width: '100%',\n                            }}\n                            optionLabelProp='label'\n                            onChange={onChangeFilterStatus}\n                            options={optionsStatusFilter}\n                        />\n                        </Form.Item>\n                    </Col>\n                </Row>\n                </Form>\n                <Spin\n                    size='medium'\n                    spinning={getLoading}>\n                    <SellingTable\n                        data={apartmentData?.result}\n                    />\n                </Spin>\n            </Space>\n        </div>\n    );\n};\n\nexport default Index;\n"],"names":["_ref","data","columns","title","dataIndex","id","render","text","_jsx","children","_jsxs","Tag","color","image","Image","width","src","concat","process","path","_","record","Space","size","Button","onClick","CreatePDF","console","log","type","icon","FaFilePdf","Table","dataSource","rowKey","Index","form","Form","useForm","filterStatus","setFilterStatus","useState","filterId","setFilterId","slotId","houseId","floorId","slotData","refetch","slotFetch","useQuery","apiService","getData","enabled","houseData","houseFetch","floorData","floorFetch","apartmentData","isLoading","getLoading","onError","error","message","useEffect","optionsStatusFilter","useMemo","value","label","optionsSlot","_slotData$result","result","map","option","name","optionsHouse","_houseData$result","optionsFloor","_floorData$result","className","direction","style","labelCol","span","wrapperCol","maxWidth","autoComplete","Row","gutter","Col","Item","Select","optionLabelProp","onChange","setFieldsValue","options","prevState","Spin","spinning","SellingTable"],"sourceRoot":""}
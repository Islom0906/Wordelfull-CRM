{"version":3,"file":"static/js/759.30c2cfa4.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","pages/sample/Slot/SlotPostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect} from 'react';\nimport {Button, Col, DatePicker, Form, message, Row} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport moment from \"moment\";\n\n\nconst initialValueForm = {\n    name: \"\",\n    finishedDate: \"\",\n\n};\n\n\nconst SlotPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n\n\n\n    // query-slot\n    const {\n        mutate: postSlotMutate,\n        data: postSlot,\n        isLoading: postSlotLoading,\n        isSuccess: postSlotSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editSlotLoading,\n        data: editSlotData,\n        refetch: editSlotRefetch,\n        isSuccess: editSlotSuccess,\n\n    } = useQuery([\"edit-slot\", editId], () => apiService.getDataByID(\"/Slot\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putSlot,\n        isLoading: putSlotLoading,\n        data: putData,\n        isSuccess: putSlotSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n\n    //                                              =====useEffect====\n\n    // slot success\n    useEffect(() => {\n        if (putSlotSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postSlotSuccess || putSlotSuccess) {\n            navigate('/slot')\n        }\n    }, [postSlot, putData])\n\n    // if edit slot\n    useEffect(() => {\n        if (editId !== \"\") {\n            editSlotRefetch();\n        }\n    }, [editId]);\n\n    // if no edit slot\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n\n    }, []);\n\n\n    //edit slot\n    useEffect(() => {\n\n\n        if (editSlotSuccess) {\n\n            const edit = {\n                name: editSlotData?.name,\n                finishedDate: moment(editSlotData?.finishedDate),\n            }\n\n            form.setFieldsValue(edit)\n        }\n\n    }, [editSlotData])\n    const onFinish = (values) => {\n\n\n        const data = {\n            name: values.name,\n            finishedDate: values.finishedDate,\n\n        };\n        if (editSlotSuccess) {\n            putSlot({url: \"/Slot\", data, id: editId});\n        } else {\n            postSlotMutate({url: \"/Slot/\", data});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n\n\n\n    return (<div>\n        {(postSlotLoading || editSlotLoading || putSlotLoading) ? <AppLoader/> :\n            <Form\n                form={form}\n                name=\"basic\"\n                labelCol={{\n                    span: 24\n                }}\n                wrapperCol={{\n                    span: 24\n                }}\n                style={{\n                    maxWidth: \"100%\"\n                }}\n                initialValues={initialValueForm}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n\n\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется название лота'}\n                            label={'Название лота'}\n                            name={'name'}\n                        />\n\n\n                    </Col>\n                    <Col span={12}>\n                        <Form.Item\n                            label=\"Время окончания\"\n                            name={'finishedDate'}\n                            rules={[{\n                                required: true, message: 'Укажите время окончания.'\n                            }]}\n                        >\n                            <DatePicker />\n                        </Form.Item>\n\n                    </Col>\n                </Row>\n\n\n\n                <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                    {editSlotSuccess ? 'Изменить' : 'Создать'}\n                </Button>\n            </Form>}\n    </div>);\n};\n\nexport default SlotPostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","initialValueForm","finishedDate","SlotPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","mutate","postSlotMutate","data","postSlot","isLoading","postSlotLoading","isSuccess","postSlotSuccess","useMutation","url","apiService","postData","onSuccess","success","onError","error","obj","response","concat","editSlotLoading","editSlotData","refetch","editSlotRefetch","editSlotSuccess","useQuery","getDataByID","enabled","putSlot","putSlotLoading","putData","putSlotSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","edit","moment","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","DatePicker","Button","htmlType","width","marginTop"],"sourceRoot":""}
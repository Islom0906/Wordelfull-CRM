{"version":3,"file":"static/js/153.9b177736.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","pages/sample/Floor/FloorPostEdit.jsx","../node_modules/antd/es/col/index.js"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useMemo, useState} from 'react';\nimport {Button, Col, Form, message, Row, Select} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\n\n\nconst initialValueForm = {\n    name: \"\",\n    houseId: null,\n};\n\n\nconst FloorPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [slotId, setSlotId] = useState(null)\n\n\n    // query-slot-get\n    const {data: slotData, refetch: slotFetch} = useQuery(\n        'get-slot',\n        () => apiService.getData('/Slot'),\n        {\n            enabled: false,\n        },\n    );\n\n    // query-house-get\n    const {data: houseData, refetch: houseFetch} = useQuery(\n        'get-house',\n        () => apiService.getData(`/House?slotId=${slotId}`),\n        {\n            enabled: false,\n        },\n    );\n\n\n\n    // query-floor\n    const {\n        mutate: postFloorMutate,\n        data: postFloor,\n        isLoading: postFloorLoading,\n        isSuccess: postFloorSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editFloorLoading,\n        data: editFloorData,\n        refetch: editFloorRefetch,\n        isSuccess: editFloorSuccess,\n\n    } = useQuery([\"edit-floor\", editId], () => apiService.getDataByID(\"/Floor\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putFloor,\n        isLoading: putFloorLoading,\n        data: putData,\n        isSuccess: putFloorSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n\n\n\n    //                                              =====useEffect====\n\n    // refetch house\n    useEffect(() => {\n        if (slotId){\n            houseFetch()\n        }\n    }, [slotId]);\n\n    // floor success\n    useEffect(() => {\n        if (putFloorSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postFloorSuccess || putFloorSuccess) {\n            navigate('/floor')\n        }\n    }, [postFloor, putData])\n\n    // if edit floor\n    useEffect(() => {\n        if (editId !== \"\") {\n            editFloorRefetch();\n        }\n    }, [editId]);\n\n    // if no edit floor\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n        slotFetch()\n    }, []);\n\n\n    //edit floor\n    useEffect(() => {\n\n        if (editFloorSuccess) {\n\n            const edit = {\n                name: editFloorData?.name,\n                slotId:editFloorData?.house?.slot?.id,\n                houseId: editFloorData?.house?.id,\n            }\n\n            setSlotId(editFloorData?.house?.slot?.id)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editFloorData])\n    const onFinish = (values) => {\n\n\n\n        const data = {\n            name: values.name,\n            houseId: values.houseId,\n\n        };\n        if (editFloorSuccess) {\n            putFloor({url: \"/Floor\", data, id: editId});\n        } else {\n            postFloorMutate({url: \"/Floor/\", data});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n\n\n    // option slot\n    const optionsSlot = useMemo(() => {\n        return slotData?.result?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.name,\n            };\n        });\n    }, [slotData]);\n\n\n    const onChangeSlot=(id)=>{\n        form.setFieldsValue({houseId:\"\"})\n        setSlotId(id)\n    }\n// option house\n    const optionsHouse = useMemo(() => {\n        return houseData?.result?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.name,\n            };\n        });\n    }, [houseData]);\n    return (<div>\n        {(postFloorLoading || editFloorLoading || putFloorLoading) ? <AppLoader/> :\n            <Form\n                form={form}\n                name=\"basic\"\n                labelCol={{\n                    span: 24\n                }}\n                wrapperCol={{\n                    span: 24\n                }}\n                style={{\n                    maxWidth: \"100%\"\n                }}\n                initialValues={initialValueForm}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n\n\n                <Row gutter={20}>\n\n\n                    <Col span={8}>\n                        <Form.Item\n                            label={'Выберите слот'}\n                            name={'slotId'}\n                            rules={[{\n                                required: true, message: 'Вы должны выбрать слот'\n                            }]}\n                            wrapperCol={{\n                                span: 24,\n                            }}\n                        >\n                            <Select\n                                style={{\n                                    width: '100%',\n                                }}\n                                placeholder='Выберите одну слот'\n                                optionLabelProp='label'\n                                onChange={onChangeSlot}\n                                options={optionsSlot}\n                            />\n                        </Form.Item>\n                    </Col>\n                    <Col span={8}>\n                        <Form.Item\n                            label={'Выберите дом'}\n                            name={'houseId'}\n                            rules={[{\n                                required: true, message: 'Вы должны выбрать дом'\n                            }]}\n                            wrapperCol={{\n                                span: 24,\n                            }}\n                        >\n                            <Select\n                                style={{\n                                    width: '100%',\n                                }}\n                                placeholder='Выберите одну дом'\n                                optionLabelProp='label'\n                                options={optionsHouse}\n                            />\n                        </Form.Item>\n                    </Col>\n                    <Col span={8}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется название этаж'}\n                            label={'Название этаж'}\n                            name={'name'}\n                        />\n\n\n                    </Col>\n                </Row>\n\n\n\n\n                <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                    {editFloorSuccess ? 'Изменить' : 'Создать'}\n                </Button>\n            </Form>}\n    </div>);\n};\n\nexport default FloorPostEdit;","import { Col } from '../grid';\nexport default Col;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","initialValueForm","houseId","FloorPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","slotId","setSlotId","useState","data","slotData","refetch","slotFetch","useQuery","apiService","getData","enabled","houseData","houseFetch","concat","mutate","postFloorMutate","postFloor","isLoading","postFloorLoading","isSuccess","postFloorSuccess","useMutation","url","postData","onSuccess","success","onError","error","obj","response","editFloorLoading","editFloorData","editFloorRefetch","editFloorSuccess","getDataByID","putFloor","putFloorLoading","putData","putFloorSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","_editFloorData$house","_editFloorData$house$","_editFloorData$house2","_editFloorData$house3","_editFloorData$house4","edit","house","slot","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","optionsSlot","useMemo","_slotData$result","result","map","option","value","optionsHouse","_houseData$result","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","Select","width","placeholder","optionLabelProp","onChange","options","FormInput","Button","htmlType","marginTop"],"sourceRoot":""}
{"version":3,"file":"static/js/185.0a2a087c.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","pages/sample/House/HousePostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useMemo, useState} from 'react';\nimport {Button, Col, Form, message, Row, Select, Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport ImgCrop from \"antd-img-crop\";\n\n\nconst initialValueForm = {\n    name: \"\",\n    slotId: null,\n    imageId:[]\n};\n\n\nconst HousePostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n\n    // query-slot-get\n    const {data: slotData, refetch: slotFetch} = useQuery(\n        'get-slot',\n        () => apiService.getData('/Slot'),\n        {\n            enabled: false,\n        },\n    );\n\n\n    // query-image\n    const {\n        mutate: imagesUploadMutate,\n        data: imagesUpload,\n        isLoading: imagesUploadLoading,\n        isSuccess: imagesUploadSuccess,\n    } = useMutation(({url, formData}) => apiService.postData(url, formData), {\n\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n    // query-house\n    const {\n        mutate: postHouseMutate,\n        data: postHouse,\n        isLoading: postHouseLoading,\n        isSuccess: postHouseSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editHouseLoading,\n        data: editHouseData,\n        refetch: editHouseRefetch,\n        isSuccess: editHouseSuccess,\n\n    } = useQuery([\"edit-house\", editId], () => apiService.getDataByID(\"/House\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putHouse,\n        isLoading: putHouseLoading,\n        data: putData,\n        isSuccess: putHouseSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n    const {mutate: imagesDeleteMutate} = useMutation(({url, ids}) => apiService.deleteImages(url, ids), {\n        onSuccess: () => message.success('Success'), onError: (error) => message.error(error.message)\n    });\n\n\n    //                                              =====useEffect====\n\n    // house success\n    useEffect(() => {\n        if (putHouseSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postHouseSuccess || putHouseSuccess) {\n            navigate('/house')\n        }\n    }, [postHouse, putData])\n\n    // if edit house\n    useEffect(() => {\n        if (editId !== \"\") {\n            editHouseRefetch();\n        }\n    }, [editId]);\n\n    // if no edit house\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n        slotFetch()\n    }, []);\n\n\n    //edit house\n    useEffect(() => {\n\n        let imageId = null;\n        if (editHouseData !== undefined) {\n                 imageId = [{\n                    uid: editHouseData?.image?.id,\n                    name: editHouseData?.image?.id,\n                    status: \"done\",\n                    url: `${process.env.REACT_APP_IMAGE_URL}/${editHouseData?.image.path}`\n                }]\n\n        }\n\n\n        if (editHouseSuccess) {\n\n            const edit = {\n                name: editHouseData?.name,\n                slotId: editHouseData?.slot?.id,\n                imageId\n            }\n\n            setFileListProps(imageId)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editHouseData])\n    const onFinish = (values) => {\n\n\n\n        const data = {\n            name: values.name,\n            slotId: values.slotId,\n            imageId:fileListProps[0]?.uid\n        };\n        if (editHouseSuccess) {\n            putHouse({url: `/House`, data,id:editId});\n        } else {\n            postHouseMutate({url: \"/House/\", data});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n    // image\n    useEffect(() => {\n        if (imagesUploadSuccess) {\n            const uploadImg = [{\n                uid: imagesUpload?.id,\n                name: imagesUpload?.id,\n                status: \"done\",\n                url: `${process.env.REACT_APP_IMAGE_URL}/${imagesUpload?.path}`\n            }]\n            form.setFieldsValue({imageId: uploadImg});\n            setFileListProps(uploadImg);\n        }\n    }, [imagesUpload]);\n\n    const onChangeImage = ({fileList: newFileList}) => {\n\n        const formData = new FormData();\n        if (newFileList.length !== 0) {\n            formData.append(\"fromFile\", newFileList[0].originFileObj);\n            imagesUploadMutate({url: \"/Image/\", formData});\n        }\n\n    };\n\n    const handleRemoveImage = (file) => {\n        const ids =  file?.uid\n        imagesDeleteMutate({url: `/Image/${ids}`});\n        form.setFieldsValue({imageId: []});\n        setFileListProps([])\n\n    }\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n    // option slot\n    const optionsSlot = useMemo(() => {\n        return slotData?.result?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.name,\n            };\n        });\n    }, [slotData]);\n\n\n    return (<div>\n        {(postHouseLoading || editHouseLoading || putHouseLoading||imagesUploadLoading) ? <AppLoader/> :\n            <Form\n                form={form}\n                name=\"basic\"\n                labelCol={{\n                    span: 24\n                }}\n                wrapperCol={{\n                    span: 24\n                }}\n                style={{\n                    maxWidth: \"100%\"\n                }}\n                initialValues={initialValueForm}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n\n\n                <Row gutter={20}>\n                    <Col span={12}>\n                        <Form.Item\n                            label={'Выберите слот'}\n                            name={'slotId'}\n                            rules={[{\n                                required: true, message: 'Вы должны выбрать слот'\n                            }]}\n                            wrapperCol={{\n                                span: 24,\n                            }}\n                        >\n                            <Select\n                                style={{\n                                    width: '100%',\n                                }}\n                                placeholder='Выберите одну слот'\n                                optionLabelProp='label'\n                                options={optionsSlot}\n                            />\n                        </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется название дом'}\n                            label={'Название дом'}\n                            name={'name'}\n                        />\n\n\n                    </Col>\n\n                </Row>\n\n                <Row gutter={20}>\n                    <Col span={12}>\n                        <Form.Item\n                            label='Изображение дома'\n                            name={'imageId'}\n                            rules={[{required: true, message: 'Требуется изображение'}]}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={1}\n                                    fileList={fileListProps}\n                                    listType='picture-card'\n                                    onChange={onChangeImage}\n                                    onPreview={onPreview}\n                                    onRemove={handleRemoveImage}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n                </Row>\n\n\n                <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                    {editHouseSuccess ? 'Изменить' : 'Создать'}\n                </Button>\n            </Form>}\n    </div>);\n};\n\nexport default HousePostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","initialValueForm","slotId","imageId","HousePostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","data","slotData","refetch","slotFetch","useQuery","apiService","getData","enabled","mutate","imagesUploadMutate","imagesUpload","isLoading","imagesUploadLoading","isSuccess","imagesUploadSuccess","useMutation","url","formData","postData","onSuccess","success","onError","error","obj","response","concat","postHouseMutate","postHouse","postHouseLoading","postHouseSuccess","_ref2","editHouseLoading","editHouseData","editHouseRefetch","editHouseSuccess","getDataByID","putHouse","putHouseLoading","putData","putHouseSuccess","_ref3","id","imagesDeleteMutate","_ref4","ids","deleteImages","useEffect","type","EDIT_DATA","payload","setFieldsValue","_editHouseData$image","_editHouseData$image2","undefined","uid","image","status","process","path","_editHouseData$slot","edit","slot","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","uploadImg","optionsSlot","useMemo","_slotData$result","result","map","option","value","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListProps$","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","Select","width","placeholder","optionLabelProp","options","FormInput","ImgCrop","Upload","maxCount","fileList","listType","onChange","_ref5","newFileList","FormData","length","append","originFileObj","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","Image","imgWindow","open","document","write","outerHTML","onRemove","beforeUpload","Button","htmlType","marginTop"],"sourceRoot":""}
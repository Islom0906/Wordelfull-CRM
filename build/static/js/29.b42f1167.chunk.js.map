{"version":3,"file":"static/js/29.b42f1167.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","@crema/core/Form/FormInputNumber.jsx","pages/sample/User/UserPostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React from 'react';\nimport {Form,  InputNumber} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInputNumber = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <InputNumber style={{width:'100%'}}/>\n        </Form.Item>\n    );\n};\n\nexport default FormInputNumber;\n\nFormInputNumber.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","    import React, {useEffect,  useState} from 'react';\nimport {Button, Col, Form, message, Row,  Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport ImgCrop from \"antd-img-crop\";\nimport FormInputNumber from \"../../../@crema/core/Form/FormInputNumber\";\n\n\nconst initialValueForm = {\n    fulName: \"\",\n    phoneNumber: \"\",\n    userName: \"\",\n    password: \"\",\n    imageId:[]\n};\n\n\nconst UserPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n    const [editImageId, setEditImageId] = useState(null)\n\n\n\n    // query-image\n    const {\n        mutate: imagesUploadMutate,\n        data: imagesUpload,\n        isLoading: imagesUploadLoading,\n        isSuccess: imagesUploadSuccess,\n    } = useMutation(({url, formData}) => apiService.postData(url, formData), {\n\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n    // query-user\n    const {\n        mutate: postUserMutate,\n        data: postUser,\n        isLoading: postUserLoading,\n        isSuccess: postUserSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editUserLoading,\n        data: editUserData,\n        refetch: editUserRefetch,\n        isSuccess: editUserSuccess,\n\n    } = useQuery([\"edit-user\", editId], () => apiService.getDataByID(\"/User\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putUser,\n        isLoading: putUserLoading,\n        data: putData,\n        isSuccess: putUserSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n\n    const {\n        mutate: putImage,\n        isLoading: putImageLoading,\n        data: putImageData,\n        isSuccess: putImageSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n    //                                              =====useEffect====\n\n    // user success\n    useEffect(() => {\n        if (putUserSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postUserSuccess || putUserSuccess) {\n            navigate('/user')\n        }\n    }, [postUser, putData])\n\n    // if edit user\n    useEffect(() => {\n        if (editId !== \"\") {\n            editUserRefetch();\n        }\n    }, [editId]);\n\n    // if no edit user\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit user\n    useEffect(() => {\n\n        let imageId = null;\n        if (editUserData !== undefined) {\n                 imageId = [{\n                    uid: editUserData?.image?.id,\n                    name: editUserData?.image?.id,\n                    status: \"done\",\n                    url: `${process.env.REACT_APP_IMAGE_URL}/${editUserData?.image.path}`\n                }]\n\n        }\n\n\n        if (editUserSuccess) {\n\n            const edit = {\n                name: editUserData?.name,\n                userName: editUserData?.userName,\n                password: editUserData?.password,\n                phoneNumber: editUserData?.phoneNumber,\n                fulName: editUserData?.fulName,\n                imageId\n            }\n\n            setFileListProps(imageId)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editUserData])\n    const onFinish = (values) => {\n\n\n\n        const data = {\n            userName: values.userName,\n            password: values.password,\n            phoneNumber: values.phoneNumber,\n            fulName: values.fulName,\n            imageId:fileListProps[0] ? fileListProps[0]?.uid :1\n        };\n        if (editUserSuccess) {\n            putUser({url: `/User`, data,id:editId});\n        } else {\n            postUserMutate({url: \"/User/\", data});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n    // image\n    useEffect(() => {\n        let imageData=putImageSuccess? putImageData:imagesUpload\n        if (imagesUploadSuccess||putImageSuccess) {\n            const uploadImg = [{\n                uid: imageData?.id,\n                name: imageData?.id,\n                status: \"done\",\n                url: `${process.env.REACT_APP_IMAGE_URL}/${imageData?.path}`\n            }]\n            form.setFieldsValue({imageId: uploadImg});\n            setFileListProps(uploadImg);\n        }\n    }, [imagesUpload,putImageData]);\n\n    const onChangeImage = ({fileList: newFileList}) => {\n\n        const formData = new FormData();\n        if (newFileList.length !== 0) {\n            formData.append(\"fromFile\", newFileList[0].originFileObj);\n            if (editUserSuccess&& editImageId){\n                putImage({url: `/Image`, data: formData,id:editImageId})\n\n            }else{\n            imagesUploadMutate({url: \"/Image/\", formData});\n\n            }\n        }\n\n    };\n\n    const handleRemoveImage = (file) => {\n        const ids =  file?.uid\n        setEditImageId(ids)\n        form.setFieldsValue({imageId: []});\n        setFileListProps([])\n\n    }\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n\n\n\n    return (<div>\n        {(postUserLoading || editUserLoading || putUserLoading||imagesUploadLoading||putImageLoading) ? <AppLoader/> :\n            <Form\n                form={form}\n                name=\"basic\"\n                labelCol={{\n                    span: 24\n                }}\n                wrapperCol={{\n                    span: 24\n                }}\n                style={{\n                    maxWidth: \"100%\"\n                }}\n                initialValues={initialValueForm}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n\n\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется полное ФИО'}\n                            label={'Полное ФИО'}\n                            name={'fulName'}\n                        />\n                    </Col>\n                    <Col span={12}>\n                        <FormInputNumber\n                            required={true}\n                            required_text={'Требуется номер телефона'}\n                            label={'Номер телефона'}\n                            name={'phoneNumber'}\n                        />\n                    </Col>\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется login'}\n                            label={'Login'}\n                            name={'userName'}\n                        />\n                    </Col>\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется пароль'}\n                            label={'Пароль'}\n                            name={'password'}\n                        />\n                    </Col>\n                </Row>\n\n                <Row gutter={20}>\n                    <Col span={12}>\n                        <Form.Item\n                            label='Изображение пользователя'\n                            name={'imageId'}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={1}\n                                    fileList={fileListProps}\n                                    listType='picture-card'\n                                    onChange={onChangeImage}\n                                    onPreview={onPreview}\n                                    onRemove={handleRemoveImage}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n                </Row>\n\n\n                <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                    {editUserSuccess ? 'Изменить' : 'Создать'}\n                </Button>\n            </Form>}\n    </div>);\n};\n\nexport default UserPostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","InputNumber","style","width","initialValueForm","fulName","phoneNumber","userName","password","imageId","UserPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","editImageId","setEditImageId","mutate","imagesUploadMutate","data","imagesUpload","isLoading","imagesUploadLoading","isSuccess","imagesUploadSuccess","useMutation","url","formData","apiService","postData","onSuccess","success","onError","error","obj","response","concat","postUserMutate","postUser","postUserLoading","postUserSuccess","_ref2","editUserLoading","editUserData","refetch","editUserRefetch","editUserSuccess","useQuery","getDataByID","enabled","putUser","putUserLoading","putData","putUserSuccess","_ref3","id","putImage","putImageLoading","putImageData","putImageSuccess","_ref4","useEffect","type","EDIT_DATA","payload","setFieldsValue","_editUserData$image","_editUserData$image2","undefined","uid","image","status","process","path","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","imageData","uploadImg","AppLoader","labelCol","span","wrapperCol","maxWidth","initialValues","onFinish","values","_fileListProps$","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","FormInputNumber","ImgCrop","Upload","maxCount","fileList","listType","onChange","_ref5","newFileList","FormData","length","append","originFileObj","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","onRemove","ids","beforeUpload","Button","htmlType","marginTop"],"sourceRoot":""}
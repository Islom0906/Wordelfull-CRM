{"version":3,"file":"static/js/29.1370151a.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","@crema/core/Form/FormInputNumber.jsx","pages/sample/User/UserPostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React from 'react';\nimport {Form,  InputNumber} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInputNumber = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <InputNumber style={{width:'100%'}}/>\n        </Form.Item>\n    );\n};\n\nexport default FormInputNumber;\n\nFormInputNumber.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","    import React, {useEffect,  useState} from 'react';\nimport {Button, Col, Form, message, Row,  Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport ImgCrop from \"antd-img-crop\";\nimport FormInputNumber from \"../../../@crema/core/Form/FormInputNumber\";\n\n\nconst initialValueForm = {\n    fulName: \"\",\n    phoneNumber: \"\",\n    userName: \"\",\n    password: \"\",\n    imageId:[]\n};\n\n\nconst UserPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n    const [editImageId, setEditImageId] = useState(null)\n\n\n\n    // query-image\n    const {\n        mutate: imagesUploadMutate,\n        data: imagesUpload,\n        isLoading: imagesUploadLoading,\n        isSuccess: imagesUploadSuccess,\n    } = useMutation(({url, formData}) => apiService.postData(url, formData), {\n\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response?.data?.errors) {\n                message.error(`${obj}: ${error.response?.data?.errors[obj]}`)\n            }\n        }\n    });\n\n    // query-user\n    const {\n        mutate: postUserMutate,\n        data: postUser,\n        isLoading: postUserLoading,\n        isSuccess: postUserSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editUserLoading,\n        data: editUserData,\n        refetch: editUserRefetch,\n        isSuccess: editUserSuccess,\n\n    } = useQuery([\"edit-user\", editId], () => apiService.getDataByID(\"/User\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putUser,\n        isLoading: putUserLoading,\n        data: putData,\n        isSuccess: putUserSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n\n    const {\n        mutate: putImage,\n        isLoading: putImageLoading,\n        data: putImageData,\n        isSuccess: putImageSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj]}`)\n            }\n        }\n    });\n\n    //                                              =====useEffect====\n\n    // user success\n    useEffect(() => {\n        if (putUserSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postUserSuccess || putUserSuccess) {\n            navigate('/user')\n        }\n    }, [postUser, putData])\n\n    // if edit user\n    useEffect(() => {\n        if (editId !== \"\") {\n            editUserRefetch();\n        }\n    }, [editId]);\n\n    // if no edit user\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit user\n    useEffect(() => {\n\n        let imageId = null;\n        if (editUserData !== undefined) {\n                 imageId = [{\n                    uid: editUserData?.image?.id,\n                    name: editUserData?.image?.id,\n                    status: \"done\",\n                    url: `${process.env.REACT_APP_IMAGE_URL}/${editUserData?.image.path}`\n                }]\n\n        }\n\n\n        if (editUserSuccess) {\n\n            const edit = {\n                name: editUserData?.name,\n                userName: editUserData?.userName,\n                password: editUserData?.password,\n                phoneNumber: editUserData?.phoneNumber,\n                fulName: editUserData?.fulName,\n                imageId\n            }\n\n            setFileListProps(imageId)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editUserData])\n    const onFinish = (values) => {\n\n\n\n        const data = {\n            userName: values.userName,\n            password: values.password,\n            phoneNumber: values.phoneNumber,\n            fulName: values.fulName,\n            imageId:fileListProps[0] ? fileListProps[0]?.uid :1\n        };\n        if (editUserSuccess) {\n            putUser({url: `/User`, data,id:editId});\n        } else {\n            postUserMutate({url: \"/User/\", data});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n    // image\n    useEffect(() => {\n        let imageData=putImageSuccess? putImageData:imagesUpload\n        if (imagesUploadSuccess||putImageSuccess) {\n            const uploadImg = [{\n                uid: imageData?.id,\n                name: imageData?.id,\n                status: \"done\",\n                url: `${process.env.REACT_APP_IMAGE_URL}/${imageData?.path}`\n            }]\n            form.setFieldsValue({imageId: uploadImg});\n            setFileListProps(uploadImg);\n        }\n    }, [imagesUpload,putImageData]);\n\n    const onChangeImage = ({fileList: newFileList}) => {\n\n        const formData = new FormData();\n        if (newFileList.length !== 0) {\n            formData.append(\"fromFile\", newFileList[0].originFileObj);\n            if (editUserSuccess&& editImageId!==1){\n                putImage({url: `/Image`, data: formData,id:editImageId})\n\n            }else{\n            imagesUploadMutate({url: \"/Image/\", formData});\n\n            }\n        }\n\n    };\n\n    const handleRemoveImage = (file) => {\n        const ids =  file?.uid\n        setEditImageId(ids)\n        form.setFieldsValue({imageId: []});\n        setFileListProps([])\n\n    }\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n\n\n\n    return (<div>\n        {(postUserLoading || editUserLoading || putUserLoading||imagesUploadLoading||putImageLoading) ? <AppLoader/> :\n            <Form\n                form={form}\n                name=\"basic\"\n                labelCol={{\n                    span: 24\n                }}\n                wrapperCol={{\n                    span: 24\n                }}\n                style={{\n                    maxWidth: \"100%\"\n                }}\n                initialValues={initialValueForm}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n\n\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется полное ФИО'}\n                            label={'Полное ФИО'}\n                            name={'fulName'}\n                        />\n                    </Col>\n                    <Col span={12}>\n                        <FormInputNumber\n                            required={true}\n                            required_text={'Требуется номер телефона'}\n                            label={'Номер телефона'}\n                            name={'phoneNumber'}\n                        />\n                    </Col>\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется login'}\n                            label={'Login'}\n                            name={'userName'}\n                        />\n                    </Col>\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется пароль'}\n                            label={'Пароль'}\n                            name={'password'}\n                        />\n                    </Col>\n                </Row>\n\n                <Row gutter={20}>\n                    <Col span={12}>\n                        <Form.Item\n                            label='Изображение пользователя'\n                            name={'imageId'}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={1}\n                                    fileList={fileListProps}\n                                    listType='picture-card'\n                                    onChange={onChangeImage}\n                                    onPreview={onPreview}\n                                    onRemove={handleRemoveImage}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n                </Row>\n\n\n                <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                    {editUserSuccess ? 'Изменить' : 'Создать'}\n                </Button>\n            </Form>}\n    </div>);\n};\n\nexport default UserPostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","InputNumber","style","width","initialValueForm","fulName","phoneNumber","userName","password","imageId","UserPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","editImageId","setEditImageId","mutate","imagesUploadMutate","data","imagesUpload","isLoading","imagesUploadLoading","isSuccess","imagesUploadSuccess","useMutation","url","formData","apiService","postData","onSuccess","success","onError","error","obj","_error$response","response","_error$response$data","errors","_error$response2","_error$response2$data","concat","postUserMutate","postUser","postUserLoading","postUserSuccess","_ref2","editUserLoading","editUserData","refetch","editUserRefetch","editUserSuccess","useQuery","getDataByID","enabled","putUser","putUserLoading","putData","putUserSuccess","_ref3","id","putImage","putImageLoading","putImageData","putImageSuccess","_ref4","useEffect","type","EDIT_DATA","payload","setFieldsValue","_editUserData$image","_editUserData$image2","undefined","uid","image","status","process","path","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","imageData","uploadImg","AppLoader","labelCol","span","wrapperCol","maxWidth","initialValues","onFinish","values","_fileListProps$","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","FormInputNumber","ImgCrop","Upload","maxCount","fileList","listType","onChange","_ref5","newFileList","FormData","length","append","originFileObj","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","onRemove","ids","beforeUpload","Button","htmlType","marginTop"],"sourceRoot":""}